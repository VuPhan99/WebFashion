{"ast":null,"code":"import _regeneratorRuntime from\"V:\\\\Web\\\\WebFashion\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"V:\\\\Web\\\\WebFashion\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"V:\\\\Web\\\\WebFashion\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{capitalize,getWeather,getWeatherIcon,windDirection}from'../../helpers';import ArrowBackIcon from'@material-ui/icons/ArrowBack';import ArrowDownwardIcon from'@material-ui/icons/ArrowDownward';import ArrowForwardIcon from'@material-ui/icons/ArrowForward';import ArrowUpwardIcon from'@material-ui/icons/ArrowUpward';import CallMadeIcon from'@material-ui/icons/CallMade';import CallReceivedIcon from'@material-ui/icons/CallReceived';import Card from'@material-ui/core/Card';import CardContent from'@material-ui/core/CardContent';import Grid from'@material-ui/core/Grid';import Typography from'@material-ui/core/Typography';import classNames from'classnames';import format from'date-fns/format';import{makeStyles}from'@material-ui/core/styles';var useStyles=makeStyles(function(theme){return{flip:{transform:'rotate(-90deg)'},weatherBackground:{backgroundColor:theme.palette.primary.main},weatherDetails:{color:theme.palette.primary.contrastText},weatherIcon:{fontSize:26}};});var getWindDirection=function getWindDirection(degree,classes){var direction=windDirection(degree);switch(direction){case'n':return/*#__PURE__*/React.createElement(ArrowUpwardIcon,null);case'ne':return/*#__PURE__*/React.createElement(CallMadeIcon,null);case'e':return/*#__PURE__*/React.createElement(ArrowForwardIcon,null);case'se':return/*#__PURE__*/React.createElement(CallReceivedIcon,{className:classes.flip});case's':return/*#__PURE__*/React.createElement(ArrowDownwardIcon,null);case'sw':return/*#__PURE__*/React.createElement(CallReceivedIcon,null);case'w':return/*#__PURE__*/React.createElement(ArrowBackIcon,null);case'nw':return/*#__PURE__*/React.createElement(CallMadeIcon,{className:classes.flip});default:break;}};var WeatherCard=function WeatherCard(_ref){var city=_ref.city,country=_ref.country,days=_ref.days;var classes=useStyles();var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),current=_useState2[0],setCurrent=_useState2[1];var _useState3=useState(undefined),_useState4=_slicedToArray(_useState3,2),forecast=_useState4[0],setForecast=_useState4[1];useEffect(function(){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _forecast,_current;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return getWeather(city,country,days);case 3:_forecast=_context.sent;if(_forecast){_current=_forecast.list[0];setCurrent(_current);setForecast(_forecast);}_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}))();},[city,country,days]);return/*#__PURE__*/React.createElement(Card,null,current&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(Grid,{container:true,spacing:0,direction:'row',justify:'space-between'},/*#__PURE__*/React.createElement(Grid,{item:true},forecast&&/*#__PURE__*/React.createElement(Typography,{variant:\"h6\"},\"\".concat(forecast.city.name,\", \").concat(forecast.city.country)),/*#__PURE__*/React.createElement(Typography,{variant:\"subtitle1\"},format(current.dt*1000,'MMMM Do YYYY, h:mm:ss a')),/*#__PURE__*/React.createElement(Typography,{variant:\"caption\"},capitalize(current.weather[0].description))),/*#__PURE__*/React.createElement(Grid,{item:true,className:\"text-xs-right\"},/*#__PURE__*/React.createElement(Typography,{variant:\"h4\"},/*#__PURE__*/React.createElement(\"span\",null,current.main.temp)))),/*#__PURE__*/React.createElement(Grid,{container:true,spacing:1,alignItems:'center',direction:'row',justify:'space-between',className:\"my-1\"},Object.keys(current.main).map(function(key,index){return/*#__PURE__*/React.createElement(Grid,{item:true,xs:6,key:index},/*#__PURE__*/React.createElement(Grid,{container:true,spacing:0,alignItems:'center',direction:'row',justify:'space-between'},/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(Typography,{variant:\"caption\"},/*#__PURE__*/React.createElement(\"span\",null,capitalize(key.replace(/_/g,' '))))),/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(Typography,{variant:\"caption\"},/*#__PURE__*/React.createElement(\"span\",null,current.main[key])))));}))),/*#__PURE__*/React.createElement(CardContent,{className:classes.weatherBackground},forecast&&/*#__PURE__*/React.createElement(Grid,{container:true,spacing:0,alignItems:'center',direction:'row',justify:'space-between',className:\"text-xs-center\"},forecast.list.map(function(day,index){return index!==0&&/*#__PURE__*/React.createElement(Typography,{variant:\"caption\",className:classes.weatherDetails,key:index},/*#__PURE__*/React.createElement(\"span\",{className:\"block\"},day.weather.description),/*#__PURE__*/React.createElement(\"span\",{className:\"block py-xs\"},getWindDirection(day.wind.deg,classes)),/*#__PURE__*/React.createElement(\"span\",{className:\"block pb-xs\"},format(current.dt*1000,'ddd')),/*#__PURE__*/React.createElement(\"span\",{className:\"block pb-xs\"},/*#__PURE__*/React.createElement(\"i\",{className:classNames(getWeatherIcon(day.weather[0].icon),classes.weatherIcon)})),/*#__PURE__*/React.createElement(\"strong\",{className:\"block pb-xs\"},\"\".concat(day.main.temp),\" \\xB0\"));})))),!current&&!forecast&&/*#__PURE__*/React.createElement(CardContent,null,/*#__PURE__*/React.createElement(Typography,null,\"Weather Data Not Loaded\")));};export default WeatherCard;","map":{"version":3,"sources":["V:/Web/WebFashion/admin/src/components/Cards/WeatherCard.js"],"names":["React","useEffect","useState","capitalize","getWeather","getWeatherIcon","windDirection","ArrowBackIcon","ArrowDownwardIcon","ArrowForwardIcon","ArrowUpwardIcon","CallMadeIcon","CallReceivedIcon","Card","CardContent","Grid","Typography","classNames","format","makeStyles","useStyles","theme","flip","transform","weatherBackground","backgroundColor","palette","primary","main","weatherDetails","color","contrastText","weatherIcon","fontSize","getWindDirection","degree","classes","direction","WeatherCard","city","country","days","undefined","current","setCurrent","forecast","setForecast","list","console","error","name","dt","weather","description","temp","Object","keys","map","key","index","replace","day","wind","deg","icon"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  capitalize,\n  getWeather,\n  getWeatherIcon,\n  windDirection\n} from '../../helpers';\n\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\nimport CallReceivedIcon from '@material-ui/icons/CallReceived';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport classNames from 'classnames';\nimport format from 'date-fns/format';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  flip: {\n    transform: 'rotate(-90deg)'\n  },\n  weatherBackground: {\n    backgroundColor: theme.palette.primary.main\n  },\n  weatherDetails: {\n    color: theme.palette.primary.contrastText\n  },\n  weatherIcon: {\n    fontSize: 26\n  }\n}));\n\nconst getWindDirection = (degree, classes) => {\n  const direction = windDirection(degree);\n  switch (direction) {\n    case 'n':\n      return <ArrowUpwardIcon />;\n    case 'ne':\n      return <CallMadeIcon />;\n    case 'e':\n      return <ArrowForwardIcon />;\n    case 'se':\n      return <CallReceivedIcon className={classes.flip} />;\n    case 's':\n      return <ArrowDownwardIcon />;\n    case 'sw':\n      return <CallReceivedIcon />;\n    case 'w':\n      return <ArrowBackIcon />;\n    case 'nw':\n      return <CallMadeIcon className={classes.flip} />;\n    default:\n      break;\n  }\n};\n\nconst WeatherCard = ({ city, country, days }) => {\n  const classes = useStyles();\n  const [current, setCurrent] = useState(undefined);\n  const [forecast, setForecast] = useState(undefined);\n\n  useEffect(() => {\n    (async function() {\n      try {\n        const forecast = await getWeather(city, country, days);\n\n        if (forecast) {\n          const current = forecast.list[0];\n          setCurrent(current);\n          setForecast(forecast);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [city, country, days]);\n\n  return (\n    <Card>\n      {current && (\n        <>\n          <CardContent>\n            <Grid\n              container\n              spacing={0}\n              direction={'row'}\n              justify={'space-between'}\n            >\n              <Grid item>\n                {forecast && (\n                  <Typography variant=\"h6\">{`${forecast.city.name}, ${forecast.city.country}`}</Typography>\n                )}\n                <Typography variant=\"subtitle1\">\n                  {format(current.dt * 1000, 'MMMM Do YYYY, h:mm:ss a')}\n                </Typography>\n                <Typography variant=\"caption\">\n                  {capitalize(current.weather[0].description)}\n                </Typography>\n              </Grid>\n              <Grid item className=\"text-xs-right\">\n                <Typography variant=\"h4\">\n                  <span>{current.main.temp}</span>\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={1}\n              alignItems={'center'}\n              direction={'row'}\n              justify={'space-between'}\n              className=\"my-1\"\n            >\n              {Object.keys(current.main).map((key, index) => (\n                <Grid item xs={6} key={index}>\n                  <Grid\n                    container\n                    spacing={0}\n                    alignItems={'center'}\n                    direction={'row'}\n                    justify={'space-between'}\n                  >\n                    <Grid item>\n                      <Typography variant=\"caption\">\n                        <span>{capitalize(key.replace(/_/g, ' '))}</span>\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"caption\">\n                        <span>{current.main[key]}</span>\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              ))}\n            </Grid>\n          </CardContent>\n          <CardContent className={classes.weatherBackground}>\n            {forecast && (\n              <Grid\n                container\n                spacing={0}\n                alignItems={'center'}\n                direction={'row'}\n                justify={'space-between'}\n                className=\"text-xs-center\"\n              >\n                {forecast.list.map(\n                  (day, index) =>\n                    index !== 0 && (\n                      <Typography\n                        variant=\"caption\"\n                        className={classes.weatherDetails}\n                        key={index}\n                      >\n                        <span className=\"block\">{day.weather.description}</span>\n                        <span className=\"block py-xs\">\n                          {getWindDirection(day.wind.deg, classes)}\n                        </span>\n                        <span className=\"block pb-xs\">\n                          {format(current.dt * 1000, 'ddd')}\n                        </span>\n                        <span className=\"block pb-xs\">\n                          <i\n                            className={classNames(\n                              getWeatherIcon(day.weather[0].icon),\n                              classes.weatherIcon\n                            )}\n                          />\n                        </span>\n                        <strong className=\"block pb-xs\">\n                          {`${day.main.temp}`} &deg;\n                        </strong>\n                      </Typography>\n                    )\n                )}\n              </Grid>\n            )}\n          </CardContent>\n        </>\n      )}\n      {!current && !forecast && (\n        <CardContent>\n          <Typography>Weather Data Not Loaded</Typography>\n        </CardContent>\n      )}\n    </Card>\n  );\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  days: PropTypes.number\n};\n\nexport default WeatherCard;\n"]},"metadata":{},"sourceType":"module"}