{"ast":null,"code":"import _defineProperty from\"V:\\\\Web\\\\WebFashion\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"V:\\\\Web\\\\WebFashion\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"V:\\\\Web\\\\WebFashion\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"V:\\\\Web\\\\WebFashion\\\\admin\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";// a little function to help us with reordering the result\nvar reorder=function reorder(list,startIndex,endIndex){var result=Array.from(list);var _result$splice=result.splice(startIndex,1),_result$splice2=_slicedToArray(_result$splice,1),removed=_result$splice2[0];result.splice(endIndex,0,removed);return result;};export default reorder;export var reorderQuoteMap=function reorderQuoteMap(_ref){var _objectSpread3;var quoteMap=_ref.quoteMap,source=_ref.source,destination=_ref.destination;var current=_toConsumableArray(quoteMap[source.droppableId]);var next=_toConsumableArray(quoteMap[destination.droppableId]);var target=current[source.index];// moving to same list\nif(source.droppableId===destination.droppableId){var reordered=reorder(current,source.index,destination.index);var _result=_objectSpread(_objectSpread({},quoteMap),{},_defineProperty({},source.droppableId,reordered));return{quoteMap:_result};}// moving to different list\n// remove from original\ncurrent.splice(source.index,1);// insert into next\nnext.splice(destination.index,0,target);var result=_objectSpread(_objectSpread({},quoteMap),{},(_objectSpread3={},_defineProperty(_objectSpread3,source.droppableId,current),_defineProperty(_objectSpread3,destination.droppableId,next),_objectSpread3));return{quoteMap:result};};","map":{"version":3,"sources":["V:/Web/WebFashion/admin/src/pages/Taskboard/reorder.js"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","reorderQuoteMap","quoteMap","source","destination","current","droppableId","next","target","index","reordered"],"mappings":"imBAAA;AACA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,IAAD,CAAOC,UAAP,CAAmBC,QAAnB,CAAgC,CAC9C,GAAMC,CAAAA,MAAM,CAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf,CAD8C,mBAE5BG,MAAM,CAACG,MAAP,CAAcL,UAAd,CAA0B,CAA1B,CAF4B,kDAEvCM,OAFuC,oBAG9CJ,MAAM,CAACG,MAAP,CAAcJ,QAAd,CAAwB,CAAxB,CAA2BK,OAA3B,EAEA,MAAOJ,CAAAA,MAAP,CACD,CAND,CAQA,cAAeJ,CAAAA,OAAf,CAEA,MAAO,IAAMS,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAuC,uBAApCC,CAAAA,QAAoC,MAApCA,QAAoC,CAA1BC,MAA0B,MAA1BA,MAA0B,CAAlBC,WAAkB,MAAlBA,WAAkB,CACpE,GAAMC,CAAAA,OAAO,oBAAOH,QAAQ,CAACC,MAAM,CAACG,WAAR,CAAf,CAAb,CACA,GAAMC,CAAAA,IAAI,oBAAOL,QAAQ,CAACE,WAAW,CAACE,WAAb,CAAf,CAAV,CACA,GAAME,CAAAA,MAAM,CAAGH,OAAO,CAACF,MAAM,CAACM,KAAR,CAAtB,CAEA;AACA,GAAIN,MAAM,CAACG,WAAP,GAAuBF,WAAW,CAACE,WAAvC,CAAoD,CAClD,GAAMI,CAAAA,SAAS,CAAGlB,OAAO,CAACa,OAAD,CAAUF,MAAM,CAACM,KAAjB,CAAwBL,WAAW,CAACK,KAApC,CAAzB,CACA,GAAMb,CAAAA,OAAM,gCACPM,QADO,wBAETC,MAAM,CAACG,WAFE,CAEYI,SAFZ,EAAZ,CAIA,MAAO,CACLR,QAAQ,CAAEN,OADL,CAAP,CAGD,CAED;AAEA;AACAS,OAAO,CAACN,MAAR,CAAeI,MAAM,CAACM,KAAtB,CAA6B,CAA7B,EACA;AACAF,IAAI,CAACR,MAAL,CAAYK,WAAW,CAACK,KAAxB,CAA+B,CAA/B,CAAkCD,MAAlC,EAEA,GAAMZ,CAAAA,MAAM,gCACPM,QADO,uDAETC,MAAM,CAACG,WAFE,CAEYD,OAFZ,iCAGTD,WAAW,CAACE,WAHH,CAGiBC,IAHjB,kBAAZ,CAMA,MAAO,CACLL,QAAQ,CAAEN,MADL,CAAP,CAGD,CAjCM","sourcesContent":["// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport default reorder;\n\nexport const reorderQuoteMap = ({ quoteMap, source, destination }) => {\n  const current = [...quoteMap[source.droppableId]];\n  const next = [...quoteMap[destination.droppableId]];\n  const target = current[source.index];\n\n  // moving to same list\n  if (source.droppableId === destination.droppableId) {\n    const reordered = reorder(current, source.index, destination.index);\n    const result = {\n      ...quoteMap,\n      [source.droppableId]: reordered\n    };\n    return {\n      quoteMap: result\n    };\n  }\n\n  // moving to different list\n\n  // remove from original\n  current.splice(source.index, 1);\n  // insert into next\n  next.splice(destination.index, 0, target);\n\n  const result = {\n    ...quoteMap,\n    [source.droppableId]: current,\n    [destination.droppableId]: next\n  };\n\n  return {\n    quoteMap: result\n  };\n};\n"]},"metadata":{},"sourceType":"module"}